basePath: /
definitions:
  domain.AuthenticationData:
    properties:
      id:
        type: string
      token:
        type: string
    type: object
  domain.Pagination:
    properties:
      items: {}
      total:
        type: integer
    type: object
  domain.Product:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
    type: object
  domain.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
    type: object
  dto.CreateProductRequest:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  dto.CreateUserRequest:
    properties:
      createAt:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.UpdateProductRequest:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
    type: object
  dto.UpdateUserRequest:
    properties:
      createAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:port
info:
  contact:
    name: Marcilio Gomes
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Clean GO API Docs
  version: 1.0.0
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login user with crendencials return token session
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.AuthenticationData'
      summary: Login user
      tags:
      - user
  /product:
    get:
      consumes:
      - application/json
      description: Fetch products with server pagination
      parameters:
      - description: 1,2
        in: query
        name: sort
        required: true
        type: string
      - description: true,false
        in: query
        name: descending
        required: true
        type: string
      - description: "1"
        in: query
        name: page
        required: true
        type: integer
      - description: "10"
        in: query
        name: itemsPerPage
        required: true
        type: integer
      - description: value_parameter
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Pagination'
      summary: Fetch products with server pagination
      tags:
      - product
    post:
      consumes:
      - application/json
      description: Create new product
      parameters:
      - description: product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Product'
      summary: Create new product
      tags:
      - product
  /product/{product_id}:
    delete:
      consumes:
      - application/json
      description: Delete a product
      parameters:
      - description: "1"
        in: query
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/domain.Product'
      summary: Delete a product
      tags:
      - product
    put:
      consumes:
      - application/json
      description: Update a product
      parameters:
      - description: product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
      summary: Update a product
      tags:
      - product
  /user:
    get:
      consumes:
      - application/json
      description: Fetch users with server pagination
      parameters:
      - description: 1,2
        in: query
        name: sort
        required: true
        type: string
      - description: true,false
        in: query
        name: descending
        required: true
        type: string
      - description: "1"
        in: query
        name: page
        required: true
        type: integer
      - description: "10"
        in: query
        name: itemsPerPage
        required: true
        type: integer
      - description: value_parameter
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Pagination'
      summary: Fetch users with server pagination
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Create new User
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
      summary: Create new User
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update a User
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
      summary: Update a User
      tags:
      - user
  /user/{user_id}:
    delete:
      consumes:
      - application/json
      description: Delete a user
      parameters:
      - description: "1"
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/domain.User'
      summary: Delete a user
      tags:
      - user
swagger: "2.0"
